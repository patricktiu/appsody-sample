apiVersion: appsody.dev/v1beta1
kind: AppsodyApplication
metadata:
  annotations:
    architecture: x86_64
    authoritative-source-url: registry.access.redhat.com
    build-date: 2019-10-29T16:44:53.794580
    description: This image contains the Kabanero development stack for the java-microprofile
      collection
    distribution-scope: public
    image.opencontainers.org/created: "2019-12-04T23:08:17-05:00"
    k8s.io/description: The Universal Base Image is designed and engineered to be
      the base layer for all of your containerized applications, middleware and utilities.
      This base image is freely redistributable, but Red Hat only supports Red Hat
      technologies through subscriptions for Red Hat products. This image is maintained
      by Red Hat and updated regularly.
    k8s.io/display-name: Red Hat Universal Base Image 8
    maintainer: Red Hat, Inc.
    name: kabanero/java-microprofile
    openshift.io/expose-services: ""
    openshift.io/tags: base rhel8
    redhat.com/build-host: cpt-1002.osbs.prod.upshift.rdu2.redhat.com
    redhat.com/component: ubi8-container
    redhat.com/license_terms: https://www.redhat.com/en/about/red-hat-end-user-license-agreements#UBI
    release: "277"
    stack.appsody.dev/configured: docker.io/kabanero/java-microprofile:0.2
    stack.appsody.dev/created: 2019-12-04T17:20:59+0000
    stack.appsody.dev/revision: 7ad65bd9ec95dc9a39fb430a4f56ef63e9026d7f
    stack.appsody.dev/tag: kabanero/java-microprofile:0.2.19
    summary: Image for Kabanero java-microprofile development
    url: https://access.redhat.com/containers/#/registry.access.redhat.com/ubi8/images/8.1-277
    vcs-ref: c42933bcdbf9f1c232e981a5e40de257c3534c8e
    vcs-type: git
    vendor: Kabanero
    version: 0.2.10
  creationTimestamp: null
  labels:
    image.opencontainers.org/title: appsody-sample
    stack.appsody.dev/version: 0.2.19
  name: appsody-sample
spec:
  applicationImage: dev.local/appsody-sample
  createKnativeService: false
  expose: true
  livenessProbe:
    failureThreshold: 12
    httpGet:
      path: /health/live
      port: 9080
    initialDelaySeconds: 5
    periodSeconds: 2
  readinessProbe:
    failureThreshold: 12
    httpGet:
      path: /health/ready
      port: 9080
    initialDelaySeconds: 5
    periodSeconds: 2
    timeoutSeconds: 1
  service:
    annotations:
      prometheus.io/scrape: "true"
    port: 9080
    type: NodePort
  stack: java-microprofile
  version: 1.0.0
status: {}
